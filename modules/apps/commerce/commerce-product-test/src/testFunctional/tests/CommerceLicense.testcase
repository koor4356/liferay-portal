@component-name = "portal-commerce"
definition {

	property portal.release = "false";
	property portal.upstream = "false";
	property testray.main.component.name = "Commerce";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@priority = "3"
	test DeleteLiferayDXPLicense {
		property commerce.enabled = "false";
		property portal.release = "true";

		ApplicationsMenuHelper.openApplicationsMenu();

		var key_panel = "Applications";

		AssertElementPresent(locator1 = "ApplicationsMenu#PANEL");

		Portlet.shutdownServer();

		License.deleteLicenseXml(deleteLicenseXml = "license.xml");

		Portlet.startServer(deleteLiferayHome = "false");

		Navigator.openURL();

		Alert.viewErrorMessage(errorMessage = "This instance is not registered.");
	}

	@priority = "5"
	test ViewCommerceDisabled {
		property commerce.enabled = "false";
		property portal.release = "true";

		ApplicationsMenuHelper.openApplicationsMenu();

		var key_panel = "Applications";

		AssertElementPresent(locator1 = "ApplicationsMenu#PANEL");

		var key_panel = "Commerce";

		AssertElementNotPresent(locator1 = "ApplicationsMenu#PANEL");
	}

	@priority = "5"
	test ViewCommerceEnabled {
		property commerce.enabled = "true";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Speedwell");

		CommerceNavigator.gotoPortlet(
			category = "Store Management",
			portlet = "Channels");

		CommerceNavigator.gotoEntry(entryName = "Speedwell Portal");

		CommerceChannels.activatePaymentMethod(paymentMethod = "Money Order");

		Navigator.openWithAppendToBaseURL(urlAppend = "web/speedwell");

		CommerceNavigator.gotoSpeedwellTopbarItem(menuItem = "Catalog");
	}

}