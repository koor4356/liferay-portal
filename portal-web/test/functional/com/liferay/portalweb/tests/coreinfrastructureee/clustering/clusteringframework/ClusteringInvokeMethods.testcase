@component-name = "portal-clustering"
definition {

	property app.server.bundles.size = "1";
	property cluster.enabled = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property remote.elasticsearch.enabled = "true";
	property test.assert.warning.exceptions = "true";
	property testray.main.component.name = "Clustering";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Page.tearDownCP();

			BlogsEntry.tearDownCP();
		}
	}

	@priority = "4"
	test InvokeMethodsInModule {
		property test.name.skip.portal.instance = "ClusteringInvokeMethods#InvokeMethodsInModule";

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "portalInetSocketAddress=/127.0.0.1:9080",
			nodePort = "8080");

		Clustering.deployJarOnSpecificServer(
			liferayDependencyJars = "com.liferay.cluster.test.module.jar",
			nodePort = "8080");

		Clustering.viewTextNotPresentOnSpecificNode(
			exceptionText = "Could not resolve module: com.liferay.cluster.test.module",
			nodePort = "8080");

		Clustering.deployJarOnSpecificServer(
			liferayDependencyJars = "com.liferay.cluster.test.module.jar",
			nodePort = "9080");

		Clustering.viewTextNotPresentOnSpecificNode(
			exceptionText = "Could not resolve module: com.liferay.cluster.test.module",
			nodePort = "9080");

		Navigator.openSpecificURL(url = "http://localhost:8080");

		AntCommand(
			locator1 = "build-test.xml",
			value1 = "cluster-invoke-method -Dcluster.invoke.method=invoke-method-module");

		Pause(locator1 = "10000");

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "Result of invoke-method-module is :9080",
			nodePort = "8080");

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "Result of invoke-method-module is :8080",
			nodePort = "9080");
	}

	@priority = "4"
	test InvokeMethodsInPortalKernel {
		property test.name.skip.portal.instance = "ClusteringInvokeMethods#InvokeMethodsInPortalKernel";

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "portalInetSocketAddress=/127.0.0.1:9080",
			nodePort = "8080");

		Clustering.runGroovyScript(
			nodePort = "8080",
			scriptFile = "groovy-script-invoke-method.groovy");

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "Result of invoke-method-portal is :9080");

		Clustering.runGroovyScript(
			nodePort = "9080",
			scriptFile = "groovy-script-invoke-method.groovy");

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "Result of invoke-method-portal is :8080");

		Clustering.deployJarOnSpecificServer(
			liferayDependencyJars = "com.liferay.cluster.test.module.jar",
			nodePort = "8080");

		Clustering.viewTextNotPresentOnSpecificNode(
			exceptionText = "Could not resolve module: com.liferay.cluster.test.module",
			nodePort = "8080");

		Clustering.deployJarOnSpecificServer(
			liferayDependencyJars = "com.liferay.cluster.test.module.jar",
			nodePort = "9080");

		Clustering.viewTextNotPresentOnSpecificNode(
			exceptionText = "Could not resolve module: com.liferay.cluster.test.module",
			nodePort = "9080");

		Navigator.openSpecificURL(url = "http://localhost:8080");

		AntCommand(
			locator1 = "build-test.xml",
			value1 = "cluster-invoke-method -Dcluster.invoke.method=invoke-method-portal");

		Pause(locator1 = "10000");

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "Result of invoke-method-portal is :9080",
			nodePort = "8080");

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "Result of invoke-method-portal is :8080",
			nodePort = "9080");
	}

}